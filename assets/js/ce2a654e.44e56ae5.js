"use strict";(self.webpackChunksignalzen_docs=self.webpackChunksignalzen_docs||[]).push([[627],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=c(n),u=i,m=d["".concat(l,".").concat(u)]||d[u]||h[u]||r;return n?a.createElement(m,s(s({ref:t},p),{},{components:n})):a.createElement(m,s({ref:t},p))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,s=new Array(r);s[0]=u;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o[d]="string"==typeof e?e:i,s[1]=o;for(var c=2;c<r;c++)s[c]=n[c];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>r,metadata:()=>o,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const r={sidebar_position:12},s="Events",o={unversionedId:"live-chat/events",id:"live-chat/events",title:"Events",description:"We support multiple events that come with metadata about each of them. This could be used for an advanced integration if you want to know in your JavaScript implementation when the chat is opened, a message is received or sent. Let's start with the events list and wrap up with a single example how to catch an event.",source:"@site/docs/live-chat/events.md",sourceDirName:"live-chat",slug:"/live-chat/events",permalink:"/docs/live-chat/events",draft:!1,tags:[],version:"current",sidebarPosition:12,frontMatter:{sidebar_position:12},sidebar:"rootSidebar",previous:{title:"Expand and Suspend",permalink:"/docs/live-chat/expand-and-suspend"},next:{title:"Email",permalink:"/docs/category/email"}},l={},c=[{value:"signalzen.collapse",id:"signalzencollapse",level:2},{value:"signalzen.messageReceived",id:"signalzenmessagereceived",level:2},{value:"signalzen.messageSent",id:"signalzenmessagesent",level:2},{value:"signalzen.chatStarted",id:"signalzenchatstarted",level:2},{value:"Real world example",id:"real-world-example",level:2}],p={toc:c},d="wrapper";function h(e){let{components:t,...n}=e;return(0,i.kt)(d,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"events"},"Events"),(0,i.kt)("p",null,"We support multiple events that come with metadata about each of them. This could be used for an advanced integration if you want to know in your JavaScript implementation when the chat is opened, a message is received or sent. Let's start with the events list and wrap up with a single example how to catch an event."),(0,i.kt)("h2",{id:"signalzencollapse"},"signalzen.collapse"),(0,i.kt)("p",null,"This event is called when the chat is expanded or suspended and by capturing it, you can get an object with key ",(0,i.kt)("inlineCode",{parentName:"p"},"status")," which will return the action nature. Currently, the status value can be ",(0,i.kt)("inlineCode",{parentName:"p"},"opened")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"closed"),"."),(0,i.kt)("h2",{id:"signalzenmessagereceived"},"signalzen.messageReceived"),(0,i.kt)("p",null,"This event is called when a visitor receives a chat message not depending on the message nature, it means it can be even an auto invitation message. The event metadata contains message information which you can check yourself while dealing with the implementation."),(0,i.kt)("h2",{id:"signalzenmessagesent"},"signalzen.messageSent"),(0,i.kt)("p",null,"This event is called when a visitor sends a chat message. The event metadata contains message information which you can check yourself while dealing with the implementation."),(0,i.kt)("h2",{id:"signalzenchatstarted"},"signalzen.chatStarted"),(0,i.kt)("p",null,"This event is called when a visitor is created on our system, just after the first message. The event metadata contains user information which you can check yourself while dealing with the implementation."),(0,i.kt)("h2",{id:"real-world-example"},"Real world example"),(0,i.kt)("p",null,"Let's say you have a webpage where you need to react somehow when the widget collapse event happens. In this case, you need to put an event listener in your code and wait for the event to happen. Once the event happens, you can execute appropriate your own JS code. See the example on the right of this page. Be aware, that the metadata is contained in the listener function argument, under the ",(0,i.kt)("inlineCode",{parentName:"p"},".detail")," scope."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-javascript"},"window.addEventListener('signalzen.collapse', function (e) {\n  if (e.detail.status === 'opened') {\n    alert('The chat is opened!');\n  } else {\n    alert('The chat is closed!');\n  }\n}, false);\n")))}h.isMDXComponent=!0}}]);